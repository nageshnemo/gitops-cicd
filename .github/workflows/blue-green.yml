name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'fast-ability-439911-u1'
  GAR_LOCATION: 'us-central1'
  GKE_CLUSTER: 'cluster-1' 
  GKE_ZONE: 'us-central1-c'
  K8S_NAMESPACE: default
  
jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4


      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
         create_credentials_file: true
         workload_identity_provider: projects/784674387874/locations/global/workloadIdentityPools/githubactions/providers/github-cicd 
         service_account: github-action@fast-ability-439911-u1.iam.gserviceaccount.com


      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'




      - name: Get current version
        id: get-version
        run: |
          CURRENT_VERSION=$(kubectl get service my-service -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.spec.selector.version}')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Deploy new version
        env:
          CURRENT_VERSION: ${{ steps.get-version.outputs.current_version }}
          NEW_VERSION: ${{ steps.get-version.outputs.current_version == 'blue' && 'green' || 'blue' }}
        run: |
          # Deploy new version
          envsubst < kubernetes/deployment-${NEW_VERSION}.yaml | kubectl apply -f -
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/${NEW_VERSION} -n ${{ env.K8S_NAMESPACE }}
          
          # Switch traffic to new version
          kubectl patch service my-service -n ${{ env.K8S_NAMESPACE }} --type='json' -p='[{"op": "replace", "path": "/spec/selector/version", "value":"'${NEW_VERSION}'"}]'
          
          # Wait for service to stabilize
          sleep 30
          
          # Delete old version
          kubectl delete deployment ${CURRENT_VERSION} -n ${{ env.K8S_NAMESPACE }}
      


 